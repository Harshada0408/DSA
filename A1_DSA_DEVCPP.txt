#include<iostream>
#include<string>
using namespace std;

class node {
public:
    int data;
    string name;
    node* next;
    node(int key, string name) {
        this->data = key;
        this->name = name;
        this->next = NULL;
    }
};

class hashing {
    node* hashtable[10];  
    int hashtable1[10];
    string nametable[10];
    bool occ[10];
public:
    hashing() {
        for (int i = 0; i < 10; i++) {
            hashtable[i] = NULL;
            hashtable1[i] = -1;
            nametable[i] = "";
            occ[i] = false;
        }
    }

    void insert1(int key, string name) {
        int loc = key % 10;
        if (hashtable[loc] == NULL) {
            hashtable[loc] = new node(key, name);
        } else {
            node* temp = hashtable[loc];
            while (temp->next != NULL) {
                
                temp = temp->next;
            }
            temp->next = new node(key, name);
        }
    }
    
    void insert2(int key, string name) {
        int loc = key % 10;
        for (int i = 0; i < 10; i++) {
            if (!occ[loc]) {
                hashtable1[loc] = key;
                nametable[loc] = name;
                occ[loc] = true;
                break;
            }
            loc = (loc + 1) % 10;
        }

        cout << "Hash table is full. Cannot insert " << name << " with key " << key << "." << endl;
        
    }

    void searchByName1(string name) {
        for (int i = 0; i < 10; i++) {
            node* temp = hashtable[i];
            while (temp != NULL) {
                if (temp->name == name) {
                    cout << "Name found with number: " << temp->data << endl;
                    return;
                }
                temp = temp->next;
            }
        }
        cout << "Name not found\n";
    }

    void searchByName2(string name) {
        for (int i = 0; i < 10; i++) {
            if (occ[i] && nametable[i] == name) {
                cout << "Name found at index " << i << " with number: " << hashtable1[i] << endl;
                return;
            }
        }
        cout << "Name not found\n";
    }

    void deleteByName1(string name) {
        for (int i = 0; i < 10; i++) {
            node* temp = hashtable[i];
            node* prev = NULL;
            while (temp != NULL) {
                if (temp->name == name) {
                    if (prev == NULL)
                        hashtable[i] = temp->next;
                    else
                        prev->next = temp->next;
                    delete temp;
                    cout << "Entry deleted.\n";
                    return;
                }
                prev = temp;
                temp = temp->next;
            }
        }
        cout << "Name not found\n";
    }

    void deleteByName2(string name) {
        for (int i = 0; i < 10; i++) {
            if (occ[i] && nametable[i] == name) {
                occ[i] = false;
                nametable[i] = "";
                hashtable1[i] = -1;
                cout << "Entry deleted.\n";
                return;
            }
        }
        cout << "Name not found\n";
    }

    void updateByName1(string name) {
        for (int i = 0; i < 10; i++) {
            node* temp = hashtable[i];
            while (temp != NULL) {
                if (temp->name == name) {
                    cout << "Enter new number: ";
                    cin >> temp->data;
                    cout << "Updated.\n";
                    return;
                }
                temp = temp->next;
            }
        }
        cout << "Name not found\n";
    }

    void updateByName2(string name) {
        for (int i = 0; i < 10; i++) {
            if (occ[i] && nametable[i] == name) {
                cout << "Enter new number: ";
                cin >> hashtable1[i];
                cout << "Updated.\n";
                return;
            }
        }
        cout << "Name not found\n";
    }

    void display1() {
        for (int i = 0; i < 10; i++) {
            node* temp = hashtable[i];
            cout << "Bucket " << i << " : ";
            while (temp != NULL) {
                cout << temp->data << " (" << temp->name << ") ";
                temp = temp->next;
            }
            cout << endl;
        }
    }

    void display2() {
        for (int i = 0; i < 10; i++) {
            if (occ[i]) {
                cout << "Index " << i << " : " << hashtable1[i] << " (" << nametable[i] << ")" << endl;
            } else {
                cout << "Index " << i << " : -" << endl;
            }
        }
    }

    ~hashing() {
        for (int i = 0; i < 10; i++) {
            node* temp = hashtable[i];
            while (temp != NULL) {
                node* del = temp;
                temp = temp->next;
                delete del;
            }
        }
    }
};

int main() {
    hashing h1;
    int ch1, ch2;

    while (true) {
        cout << "\nMenu:\n 1. Separate Chaining\n 2. Linear Probing\n 3. Exit\n";
        cout << "Enter choice: ";
        cin >> ch1;

        if (ch1 == 1) {
            while (true) {
                cout << "\n1. Insert\n2. Search by Name\n3. Delete by Name\n4. Update by Name\n5. Display\n6. Back\n";
                cout << "Enter choice: ";
                cin >> ch2;

                if (ch2 == 1) {
                    int key;
                    string name;
                    cout << "Enter key: ";
                    cin >> key;
                    cout << "Enter name: ";
                    cin >> name;
                    h1.insert1(key, name);
                } else if (ch2 == 2) {
                    string name;
                    cout << "Enter name to search: ";
                    cin >> name;
                    h1.searchByName1(name);
                } else if (ch2 == 3) {
                    string name;
                    cout << "Enter name to delete: ";
                    cin >> name;
                    h1.deleteByName1(name);
                } else if (ch2 == 4) {
                    string name;
                    cout << "Enter name to update: ";
                    cin >> name;
                    h1.updateByName1(name);
                } else if (ch2 == 5) {
                    h1.display1();
                } else if (ch2 == 6) {
                    break;
                } else {
                    cout << "Invalid choice\n";
                }
            }
        } else if (ch1 == 2) {
            while (true) {
                cout << "\n1. Insert\n2. Search by Name\n3. Delete by Name\n4. Update by Name\n5. Display\n6. Back\n";
                cout << "Enter choice: ";
                cin >> ch2;

                if (ch2 == 1) {
                    int key;
                    string name;
                    cout << "Enter key: ";
                    cin >> key;
                    cout << "Enter name: ";
                    cin >> name;
                    h1.insert2(key, name);
                } else if (ch2 == 2) {
                    string name;
                    cout << "Enter name to search: ";
                    cin >> name;
                    h1.searchByName2(name);
                } else if (ch2 == 3) {
                    string name;
                    cout << "Enter name to delete: ";
                    cin >> name;
                    h1.deleteByName2(name);
                } else if (ch2 == 4) {
                    string name;
                    cout << "Enter name to update: ";
                    cin >> name;
                    h1.updateByName2(name);
                } else if (ch2 == 5) {
                    h1.display2();
                } else if (ch2 == 6) {
                    break;
                } else {
                    cout << "Invalid choice\n";
                }
            }
        } else if (ch1 == 3) {
            break;
        } else {
            cout << "Invalid choice\n";
        }
    }

    return 0;
}
